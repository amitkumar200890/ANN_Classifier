# -*- coding: utf-8 -*-
"""ann_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bW_msx7s2AypuH7pj6dnr35s0tk0p1ce
"""

import numpy as np
import pandas as pd
import tensorflow as tf

tf.__version__

"""**Load the dataset into dataframe**"""

df = pd.read_csv('/content/future_churn_data.csv')
X = df.iloc[:, 3:-1].values
Y = df.iloc[:, -1].values

"""**Encoding categorical data**"""

# Label Encoding the "Gender" column
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
X[:, 2] = le.fit_transform(X[:, 2])

# One Hot Encoding the "Geography" column
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

"""**split the dataset into train and test**"""

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 1)

"""**Feature Scaling**"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""**Build the ANN**"""

ann = tf.keras.models.Sequential()
# create the input layer
ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))

# add the hidden layer
ann.add(tf.keras.layers.Dense(units = 6, activation = 'relu'))

# add the output layer
ann.add(tf.keras.layers.Dense(units = 1, activation = 'sigmoid'))

"""**Compile the ANN**"""

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""**Train the model**"""

ann.fit(X_train, Y_train, batch_size = 32, epochs = 100)

# Predicting the Test set results
Y_prediction = ann.predict(X_test)
Y_prediction = (Y_prediction > 0.5)
print(np.concatenate((Y_prediction.reshape(len(Y_prediction),1), Y_test.reshape(len(Y_test),1)),1))

"""**Predict for 1 new data**"""

print(ann.predict(sc.transform([[1, 0, 0, 750, 1, 45, 3, 55000, 2, 1, 1, 40000]])) > 0.5)

